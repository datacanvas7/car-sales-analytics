# -*- coding: utf-8 -*-
"""eda_car_sales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CFcfBfOAFkAPnRtBvDlJ0IvfV4w6FA7Y

# Car Sales EDA

## 01- Importing libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

"""## 02- Load dataset"""

car = pd.read_excel("Car Dashboard Source (2).xlsx", sheet_name="Orders")
car.head()

"""## 03- EDA Steps"""

car.shape

car.dtypes

car.describe().T

car.isnull().sum()

car.nunique()

car.columns

"""## 04- Data Visualization

### Shipping Mode vs Delivery TAT
This barplot shows us average TAT for different shipping modes.
"""

plt.figure(figsize=(8, 5))
sns.barplot(x="Ship Mode", y="Delivery-TAT", data=car, errorbar=None)
plt.gca().bar_label(plt.gca().containers[0], fmt='%.1f')  # Data labels
plt.title("Ship Mode vs Delivery TAT")
plt.tight_layout()
plt.show()

"""### Sales by Segment and Country
This barplot explains us the number of sales per Country with bifurcation of each Segment.
"""

import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(10, 6))
sns.barplot(x='Country/Region', y='Sales', data=car, hue='Segment', ci=None, ax=ax)
for container in ax.containers:
    ax.bar_label(container, fmt='%.0f', label_type='edge')
plt.title('Sales by Segment and Country/Region')
plt.xlabel('Country/Region')
plt.ylabel('Sales')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""### Sales Trend Analysis
This detailed analysis shows us the sales over daily, monthly and quarterly period of time.
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Load and prep data
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])

# Aggregations
daily_sales = car.groupby('Order Date')['Sales'].sum().reset_index().sort_values('Order Date')
daily_sales['MA_7'] = daily_sales['Sales'].rolling(7).mean()  # Add moving average

monthly_sales = car.set_index('Order Date').resample('M')['Sales'].sum().reset_index()
quarterly_sales = car.set_index('Order Date').resample('Q')['Sales'].sum().reset_index()

# Create figure
fig = make_subplots(
    rows=3, cols=1,
    subplot_titles=('Daily Sales with 7-Day MA', 'Monthly Sales', 'Quarterly Sales'),
    vertical_spacing=0.1,
    shared_xaxes=False
)

# Add traces
fig.add_trace(
    go.Scatter(x=daily_sales['Order Date'], y=daily_sales['Sales'],
               name='Daily Sales', line=dict(color='blue', width=1)),
    row=1, col=1
)
fig.add_trace(
    go.Scatter(x=daily_sales['Order Date'], y=daily_sales['MA_7'],
               name='7-Day MA', line=dict(color='red', width=2)),
    row=1, col=1
)

fig.add_trace(
    go.Bar(x=monthly_sales['Order Date'], y=monthly_sales['Sales'],
           name='Monthly', marker_color='#1f77b4'),  # Seaborn default blue
    row=2, col=1
)

fig.add_trace(
    go.Bar(x=quarterly_sales['Order Date'], y=quarterly_sales['Sales'],
           name='Quarterly', marker_color='#2ca02c'),  # Seaborn default green
    row=3, col=1
)

# Update layout
fig.update_layout(
    height=900,
    title="<b>Sales Trend Analysis</b><br><sup>Daily, Monthly & Quarterly Patterns</sup>",
    hovermode="x unified",
    template="plotly_white"
)

# Axis formatting
for i, unit in enumerate(['Day', 'Month', 'Quarter'], 1):
    fig.update_xaxes(title_text=f"Time ({unit})", row=i, col=1,
                    tickformat='%b %Y' if i>1 else None)
    fig.update_yaxes(title_text="Sales ($)", row=i, col=1)

fig.show()

"""### Sales Statistics
This detailed summary helps us to understand different parameters and trends for sales made.
"""

import pandas as pd

# Prepare data
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])
daily_sales = car.groupby('Order Date')['Sales'].sum().reset_index()
monthly_sales = car.set_index('Order Date').resample('M')['Sales'].sum().reset_index()

# Calculate statistics
stats = {
    'Total Sales': f"${car['Sales'].sum():,.2f}",
    'Average Daily Sales': f"${daily_sales['Sales'].mean():,.2f}",
    'Median Daily Sales': f"${daily_sales['Sales'].median():,.2f}",
    'Daily Sales Std Dev': f"${daily_sales['Sales'].std():,.2f}",
    'Coefficient of Variation': f"{(daily_sales['Sales'].std()/daily_sales['Sales'].mean())*100:.1f}%",
    'Min Daily Sales': f"${daily_sales['Sales'].min():,.2f}",
    'Max Daily Sales': f"${daily_sales['Sales'].max():,.2f}",
    'Sales Range': f"${daily_sales['Sales'].max()-daily_sales['Sales'].min():,.2f}",
    'Number of Trading Days': f"{len(daily_sales):,} days",
    'Date Range': f"{daily_sales['Order Date'].min().strftime('%Y-%m-%d')} to {daily_sales['Order Date'].max().strftime('%Y-%m-%d')}",
    'Average Monthly Sales': f"${monthly_sales['Sales'].mean():,.2f}",
    'Monthly Sales Std Dev': f"${monthly_sales['Sales'].std():,.2f}",
    'Monthly Coefficient of Variation': f"{(monthly_sales['Sales'].std()/monthly_sales['Sales'].mean())*100:.1f}%",
    'Best Month': f"{monthly_sales.loc[monthly_sales['Sales'].idxmax(), 'Order Date'].strftime('%b %Y')} (${monthly_sales['Sales'].max():,.2f})",
    'Worst Month': f"{monthly_sales.loc[monthly_sales['Sales'].idxmin(), 'Order Date'].strftime('%b %Y')} (${monthly_sales['Sales'].min():,.2f})"
}

# Convert to DataFrame
pd.DataFrame(list(stats.items()), columns=['Metric', 'Value'])

"""### Product Category Performance Analysis
This detailed analysis shows the different trends for sub-category of products against sales.
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Data Preparation
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])

# Time-based aggregations
monthly_sales = car.set_index('Order Date').groupby([pd.Grouper(freq='M'), 'Category'])['Sales'].sum().reset_index()
quarterly_sales = car.set_index('Order Date').groupby([pd.Grouper(freq='Q'), 'Category'])['Sales'].sum().reset_index()

# Category statistics
cat_stats = car.groupby('Category')['Sales'].agg(['sum', 'mean', 'std', 'count'])
cat_stats['CV%'] = (cat_stats['std'] / cat_stats['mean'] * 100).round(1)

# Visualization Setup
fig = make_subplots(
    rows=3, cols=2,
    specs=[[{"type": "scatter"}, {"type": "box"}],
           [{"type": "scatter"}, {"type": "bar"}],
           [{"colspan": 2}, None]],
    subplot_titles=(
        'Monthly Sales Trend', 'Sales Distribution by Category',
        'Quarterly Sales Pattern', 'Sales Volatility (CV%)',
        'Category Market Share Over Time'
    )
)

# Color scheme
colors = px.colors.qualitative.Set3

# Plot 1: Monthly Trend (Stacked Area)
for i, (cat, data) in enumerate(monthly_sales.groupby('Category')):
    fig.add_trace(
        go.Scatter(
            x=data['Order Date'], y=data['Sales'],
            name=cat, stackgroup='one',
            line=dict(color=colors[i]),
            hovertemplate="%{x|%b %Y}: %{y:$,.0f}<extra>%{fullData.name}</extra>"
        ), row=1, col=1)

# Plot 2: Sales Distribution (Boxplot)
for i, (cat, data) in enumerate(car.groupby('Category')):
    fig.add_trace(
        go.Box(
            y=data['Sales'], name=cat,
            marker_color=colors[i],
            boxmean=True,
            hovertemplate="%{y:$,.0f}<extra>%{fullData.name}</extra>"
        ), row=1, col=2)

# Plot 3: Quarterly Trends
for i, (cat, data) in enumerate(quarterly_sales.groupby('Category')):
    fig.add_trace(
        go.Scatter(
            x=data['Order Date'], y=data['Sales'],
            mode='lines+markers',
            line=dict(color=colors[i]),
            showlegend=False,
            hovertemplate="Q%{x|%q %Y}: %{y:$,.0f}<extra>%{fullData.name}</extra>"
        ), row=2, col=1)

# Plot 4: Volatility (CV%)
fig.add_trace(
    go.Bar(
        x=cat_stats.index, y=cat_stats['CV%'],
        marker_color=colors[:len(cat_stats)],
        text=cat_stats['CV%'],
        texttemplate='%{text:.1f}%',
        textposition='outside',
        hovertemplate="%{x}: %{y:.1f}%<extra></extra>"
    ), row=2, col=2)

# Plot 5: Market Share
monthly_total = monthly_sales.groupby('Order Date')['Sales'].sum()
for i, (cat, data) in enumerate(monthly_sales.groupby('Category')):
    share = (data.set_index('Order Date')['Sales'] / monthly_total * 100).reset_index()
    fig.add_trace(
        go.Scatter(
            x=share['Order Date'], y=share['Sales'],
            line=dict(color=colors[i]),
            showlegend=False,
            hovertemplate="%{x|%b %Y}: %{y:.1f}%<extra>%{fullData.name}</extra>"
        ), row=3, col=1)

# Layout Configuration
fig.update_layout(
    height=1000,
    title="Product Category Performance Analysis",
    hovermode="x unified",
    template="plotly_white",
    margin=dict(t=100))

# Axis Labels
fig.update_xaxes(title_text="Date", row=1, col=1)
fig.update_xaxes(title_text="Category", row=1, col=2)
fig.update_xaxes(title_text="Date", row=2, col=1)
fig.update_xaxes(title_text="Category", row=2, col=2)
fig.update_xaxes(title_text="Date", row=3, col=1)

fig.update_yaxes(title_text="Sales ($)", row=1, col=1)
fig.update_yaxes(title_text="Sales ($)", row=1, col=2)
fig.update_yaxes(title_text="Sales ($)", row=2, col=1)
fig.update_yaxes(title_text="CV (%)", row=2, col=2)
fig.update_yaxes(title_text="Market Share (%)", row=3, col=1)

fig.show()

"""### Product Category Statistics
This summary helps us to understand the trends for each product sub-category in detail.
"""

import pandas as pd
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])

# Category Analysis
def format_currency(x):
    return f"${x:,.2f}"

category_stats = (
    car.groupby('Category')['Sales']
    .agg(Total_Sales='sum',
         Avg_Order_Value='mean',
         Std_Dev='std',
         Order_Count='count',
         Min_Sale='min',
         Max_Sale='max')
    .assign(
        Market_Share=lambda x: (x['Total_Sales']/x['Total_Sales'].sum()*100).round(1),
        CV_Order=lambda x: (x['Std_Dev']/x['Avg_Order_Value']*100).round(1),
        Sales_Range=lambda x: x['Max_Sale'] - x['Min_Sale']
    )
)

# Monthly Volatility Analysis
monthly_stats = (
    car.assign(Year_Month=car['Order Date'].dt.to_period('M'))
    .groupby(['Year_Month', 'Category'])['Sales']
    .sum()
    .groupby('Category')
    .agg(Monthly_Avg='mean',
         Monthly_Std='std')
    .assign(Monthly_CV=lambda x: (x['Monthly_Std']/x['Monthly_Avg']*100).round(1))
    .reset_index()
)

# Merge and Format Results
final_output = (
    category_stats.reset_index()
    .merge(monthly_stats, on='Category')
    .assign(
        **{f'{col}_Formatted': lambda x: x[col].apply(format_currency)
        for col in ['Total_Sales', 'Avg_Order_Value', 'Std_Dev',
                   'Min_Sale', 'Max_Sale', 'Sales_Range',
                   'Monthly_Avg', 'Monthly_Std']
    })
)

# Create Summary Table
summary_table = final_output[[
    'Category', 'Total_Sales_Formatted', 'Market_Share',
    'Avg_Order_Value_Formatted', 'Order_Count',
    'CV_Order', 'Monthly_CV'
]].rename(columns={
    'Total_Sales_Formatted': 'Total Sales',
    'Market_Share': 'Market Share (%)',
    'Avg_Order_Value_Formatted': 'Avg Order Value',
    'CV_Order': 'Order Volatility (CV%)',
    'Monthly_CV': 'Monthly Volatility (CV%)'
})

summary_table

"""### Sales & Profit Relationship Analysis
This analysis depicts the different relations for sales and profit with profit-margin distribution.
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Data Preparation
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])
car['Profit'] = pd.to_numeric(car['Profit'])
car['Profit_Margin_%'] = (car['Profit'] / car['Sales'] * 100).round(2)

# Create aggregations
daily = car.groupby('Order Date').agg({'Sales':'sum', 'Profit':'sum'}).reset_index()
monthly = car.set_index('Order Date').resample('M').agg({'Sales':'sum', 'Profit':'sum'}).reset_index()
monthly['Profit_Margin_%'] = (monthly['Profit'] / monthly['Sales'] * 100).round(2)
categories = car.groupby('Category').agg({'Sales':'sum', 'Profit':'sum'}).reset_index()

# Visualization Setup
fig = make_subplots(
    rows=3, cols=2,
    subplot_titles=(
        'Order-Level Profitability', 'Profit Margin Distribution',
        'Daily Performance', 'Monthly Performance',
        'Category Comparison', 'Margin Trend'
    ),
    specs=[[{}, {}], [{}, {}], [{}, {}]],
    vertical_spacing=0.1,
    horizontal_spacing=0.1
)

# Color scheme
colors = px.colors.qualitative.Set3

# 1. Order-Level Scatter with Trendline
fig.add_trace(
    go.Scatter(
        x=car['Sales'], y=car['Profit'],
        mode='markers', name='Orders',
        marker=dict(size=3, opacity=0.6, color='blue'),
        hovertemplate='Sales: $%{x:,.2f}<br>Profit: $%{y:,.2f}<extra></extra>',
    ), row=1, col=1)

# Add trendline
trend = np.poly1d(np.polyfit(car['Sales'], car['Profit'], 1))
fig.add_trace(
    go.Scatter(
        x=car['Sales'], y=trend(car['Sales']),
        mode='lines', name='Trend',
        line=dict(color='red', width=2),
    ), row=1, col=1)

# 2. Profit Margin Distribution
for i, cat in enumerate(car['Category'].unique()):
    fig.add_trace(
        go.Box(
            y=car[car['Category']==cat]['Profit_Margin_%'],
            name=cat, marker_color=colors[i],
            showlegend=False
        ), row=1, col=2)

# 3. Daily Performance
fig.add_trace(
    go.Scatter(
        x=daily['Sales'], y=daily['Profit'],
        mode='markers', name='Daily',
        marker=dict(size=5, color='green'),
        hovertemplate='$%{x:,.2f} Sales<br>$%{y:,.2f} Profit<extra></extra>',
    ), row=2, col=1)

# 4. Monthly Performance
fig.add_trace(
    go.Scatter(
        x=monthly['Sales'], y=monthly['Profit'],
        mode='markers', name='Monthly',
        marker=dict(size=8, color='orange'),
        text=monthly['Order Date'].dt.strftime('%b %Y'),
        hovertemplate='%{text}<br>$%{x:,.2f} Sales<br>$%{y:,.2f} Profit<extra></extra>',
    ), row=2, col=2)

# 5. Category Comparison
fig.add_trace(
    go.Scatter(
        x=categories['Sales'], y=categories['Profit'],
        mode='markers+text', name='Categories',
        marker=dict(size=15, color=colors),
        text=categories['Category'], textposition='top center',
        hovertemplate='%{text}<br>$%{x:,.2f} Sales<br>$%{y:,.2f} Profit<extra></extra>',
    ), row=3, col=1)

# 6. Margin Trend
fig.add_trace(
    go.Scatter(
        x=monthly['Order Date'], y=monthly['Profit_Margin_%'],
        mode='lines+markers', name='Margin',
        line=dict(color='purple', width=2),
        hovertemplate='%{x|%b %Y}<br>%{y:.1f}% Margin<extra></extra>',
    ), row=3, col=2)

# Corrected Axis Labels
fig.update_xaxes(title_text="Sales ($)", row=1, col=1)
fig.update_yaxes(title_text="Profit ($)", row=1, col=1)
fig.update_xaxes(title_text="Category", row=1, col=2)
fig.update_yaxes(title_text="Margin (%)", row=1, col=2)
fig.update_xaxes(title_text="Daily Sales ($)", row=2, col=1)
fig.update_yaxes(title_text="Daily Profit ($)", row=2, col=1)
fig.update_xaxes(title_text="Monthly Sales ($)", row=2, col=2)
fig.update_yaxes(title_text="Monthly Profit ($)", row=2, col=2)
fig.update_xaxes(title_text="Category Sales ($)", row=3, col=1)
fig.update_yaxes(title_text="Category Profit ($)", row=3, col=1)
fig.update_xaxes(title_text="Month", row=3, col=2)
fig.update_yaxes(title_text="Margin (%)", row=3, col=2)

# Final Layout
fig.update_layout(
    height=1000,
    title='Sales & Profit Relationship Analysis',
    hovermode='closest',
    template='plotly_white',
    showlegend=False
)

fig.update_xaxes(tickangle=45, row=3, col=2)
fig.show()

"""### Delivery Impact Analysis
This detailed summary helps us to understand the shipping delays impact sales/profit.
"""

import pandas as pd

# Data Preparation
date_cols = ['Order Date', 'Ship Date']
num_cols = ['Sales', 'Profit', 'Delivery-TAT']
car[date_cols] = car[date_cols].apply(pd.to_datetime)
car[num_cols] = car[num_cols].apply(pd.to_numeric)

# Calculations
car['Delivery_Days'] = (car['Ship Date'] - car['Order Date']).dt.days
car['Profit_Margin_%'] = (car['Profit']/car['Sales']*100).round(2)
car['Delivery_Category'] = pd.cut(car['Delivery_Days'],
                                bins=[0, 3, 7, 14, float('inf')],
                                labels=['Fast (0-3)', 'Standard (4-7)', 'Slow (8-14)', 'Very Slow (15+)'])

# Delivery Analysis
delivery_stats = car['Delivery_Days'].agg(['mean', 'median', 'std', 'min', 'max']).round(1)
correlations = car[['Sales', 'Profit', 'Profit_Margin_%']].corrwith(car['Delivery_Days']).round(3)

# Grouped Analysis
delivery_impact = car.groupby('Delivery_Category').agg(
    Order_Count=('Sales', 'count'),
    Avg_Sales=('Sales', 'mean'),
    Total_Sales=('Sales', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    Avg_Margin=('Profit_Margin_%', 'mean'),
    Avg_Delivery=('Delivery_Days', 'mean')
).round(2)

ship_mode_analysis = car.groupby('Ship Mode').agg(
    Avg_Delivery=('Delivery_Days', 'mean'),
    Std_Delivery=('Delivery_Days', 'std'),
    Avg_Sales=('Sales', 'mean'),
    Avg_Profit=('Profit', 'mean'),
    Avg_Margin=('Profit_Margin_%', 'mean')
).round(2)

# Summary Metrics
fast_orders = (car['Delivery_Category'] == 'Fast (0-3)').mean() * 100
slow_orders = (car['Delivery_Days'] > 7).mean() * 100
margin_diff = delivery_impact['Avg_Margin'].max() - delivery_impact['Avg_Margin'].min()

summary_data = {
    'Metric': [
        'Average Delivery Time', 'Median Delivery Time', 'Delivery Time Std Dev',
        'Fastest Delivery', 'Slowest Delivery', 'Sales-Delivery Correlation',
        'Profit-Delivery Correlation', 'Margin-Delivery Correlation',
        'Best Delivery Category', 'Worst Delivery Category',
        'Fast Delivery Orders (%)', 'Slow Delivery Orders (%)',
        'Margin Impact of Delays', 'Most Reliable Ship Mode', 'Fastest Ship Mode'
    ],
    'Value': [
        f"{delivery_stats['mean']} days", f"{delivery_stats['median']} days",
        f"{delivery_stats['std']} days", f"{delivery_stats['min']} days",
        f"{delivery_stats['max']} days", f"{correlations['Sales']}",
        f"{correlations['Profit']}", f"{correlations['Profit_Margin_%']}",
        f"{delivery_impact['Avg_Margin'].idxmax()} ({delivery_impact['Avg_Margin'].max():.1f}%)",
        f"{delivery_impact['Avg_Margin'].idxmin()} ({delivery_impact['Avg_Margin'].min():.1f}%)",
        f"{fast_orders:.1f}%", f"{slow_orders:.1f}%",
        f"{margin_diff:.1f}% difference",
        f"{ship_mode_analysis['Std_Delivery'].idxmin()} ({ship_mode_analysis['Std_Delivery'].min():.1f} std)",
        f"{ship_mode_analysis['Avg_Delivery'].idxmin()} ({ship_mode_analysis['Avg_Delivery'].min():.1f} days)"
    ]
}

pd.DataFrame(summary_data)

"""### Customer Segmentation & Behavior
• RFM Analysis (Recency, Frequency, Monetary):
- Recency: When was the last purchase of each customer?\
This summary shows us the indepth analysis for each customer.

"""

import pandas as pd

# Data Preparation
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])

# Customer Last Purchase Analysis
customer_last_purchase = car.groupby('Customer ID').agg(
    Last_Purchase_Date=('Order Date', 'max'),
    Customer_Name=('Customer Name', 'first'),
    Total_Sales=('Sales', 'sum'),
    Order_Count=('Sales', 'count'),
    Segment=('Segment', 'first'),
    Region=('Region', 'first')
).reset_index()

# Calculate days since last purchase
latest_date = car['Order Date'].max()
customer_last_purchase['Days_Since_Last_Purchase'] = (latest_date - customer_last_purchase['Last_Purchase_Date']).dt.days

# Categorize recency
def categorize_recency(days):
    if days <= 30: return 'Recent (0-30 days)'
    elif days <= 90: return 'Moderate (31-90 days)'
    elif days <= 180: return 'At Risk (91-180 days)'
    elif days <= 365: return 'Dormant (181-365 days)'
    else: return 'Lost (365+ days)'

customer_last_purchase['Recency_Category'] = customer_last_purchase['Days_Since_Last_Purchase'].apply(categorize_recency)

# Keep only requested columns
final_output = customer_last_purchase[[
    'Customer ID', 'Last_Purchase_Date', 'Customer_Name',
    'Total_Sales', 'Order_Count', 'Segment', 'Region'
]].rename(columns={'Customer_ID': 'Customer ID'})

final_output

"""- Frequency: How often do customers buy?\
This detailed summary helps us to understand the customer's behaviour as how often they order.

"""

import pandas as pd

# Data Preparation
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])

# Customer Frequency Analysis
customer_freq = car.groupby('Customer ID').agg(
    Order_Count=('Order Date', 'count'),
    First_Purchase=('Order Date', 'min'),
    Last_Purchase=('Order Date', 'max'),
    Customer_Name=('Customer Name', 'first'),
    Total_Sales=('Sales', 'sum'),
    Avg_Order_Value=('Sales', 'mean'),
    Segment=('Segment', 'first'),
    Region=('Region', 'first')
).reset_index()

# Calculate metrics
customer_freq['Lifespan_Days'] = (customer_freq['Last_Purchase'] - customer_freq['First_Purchase']).dt.days.fillna(0)
customer_freq['Purchase_Freq_Per_Year'] = np.where(
    customer_freq['Lifespan_Days'] > 0,
    (customer_freq['Order_Count'] - 1) / (customer_freq['Lifespan_Days'] / 365.25),
    0
)
customer_freq['Days_Between_Orders'] = np.where(
    customer_freq['Order_Count'] > 1,
    customer_freq['Lifespan_Days'] / (customer_freq['Order_Count'] - 1),
    np.nan
)

# Frequency Categories
def freq_category(orders):
    if orders == 1: return 'One-time'
    elif orders <= 3: return 'Occasional'
    elif orders <= 7: return 'Regular'
    elif orders <= 15: return 'Frequent'
    else: return 'Very Frequent'

customer_freq['Frequency_Category'] = customer_freq['Order_Count'].apply(freq_category)

# Summary Stats
total_customers = len(customer_freq)
one_time_pct = (customer_freq['Order_Count'] == 1).mean() * 100
repeat_pct = (customer_freq['Order_Count'] > 1).mean() * 100
high_freq_pct = (customer_freq['Order_Count'] >= 8).mean() * 100

stats = {
    'Metric': [
        'Total Customers', 'Avg Orders', 'Median Orders', 'Max Orders',
        'Avg Days Between Orders', 'Median Days Between',
        'Avg Purchase Freq (per year)', 'One-time Customers (%)',
        'Repeat Customers (%)', 'High-Freq Customers (%)',
        'Avg Customer Lifespan (days)', 'Median Lifespan (days)'
    ],
    'Value': [
        f"{total_customers:,}",
        f"{customer_freq['Order_Count'].mean():.1f}",
        f"{customer_freq['Order_Count'].median()}",
        f"{customer_freq['Order_Count'].max()}",
        f"{customer_freq['Days_Between_Orders'].mean():.0f}",
        f"{customer_freq['Days_Between_Orders'].median():.0f}",
        f"{customer_freq['Purchase_Freq_Per_Year'].mean():.1f}",
        f"{one_time_pct:.1f}%",
        f"{repeat_pct:.1f}%",
        f"{high_freq_pct:.1f}%",
        f"{customer_freq['Lifespan_Days'].mean():.0f}",
        f"{customer_freq['Lifespan_Days'].median():.0f}"
    ]
}

pd.DataFrame(stats)

"""- Monetary: How much do they spend?
This helps us to understand customer segmentation.
"""

import pandas as pd

# Data Preparation
car[['Sales', 'Profit']] = car[['Sales', 'Profit']].apply(pd.to_numeric)
car['Order Date'] = pd.to_datetime(car['Order Date'])

# Customer Spending Analysis
customer_spending = car.groupby(['Customer ID', 'Customer Name']).agg(
    Total_Sales=('Sales', 'sum'),
    Order_Count=('Sales', 'count'),
    Avg_Order_Value=('Sales', 'mean'),
    Total_Profit=('Profit', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    First_Purchase=('Order Date', 'min'),
    Last_Purchase=('Order Date', 'max'),
    Segment=('Segment', 'first'),
    Region=('Region', 'first')
).round(2).reset_index()

# Spending Categories
def categorize_spending(x):
    if x >= 10000: return 'VIP ($10,000+)'
    elif x >= 5000: return 'High Value ($5,000-$9,999)'
    elif x >= 2000: return 'Medium Value ($2,000-$4,999)'
    elif x >= 1000: return 'Regular ($1,000-$1,999)'
    elif x >= 500: return 'Low Value ($500-$999)'
    else: return 'Minimal (<$500)'

customer_spending['Spending_Category'] = customer_spending['Total_Sales'].apply(categorize_spending)
customer_summary = customer_spending.sort_values('Total_Sales', ascending=False)

# Spending Summary
spending_summary = customer_summary.groupby('Spending_Category').agg(
    Customer_Count=('Customer ID', 'count'),
    Total_Sales_Sum=('Total_Sales', 'sum'),
    Avg_Sales_Per_Customer=('Total_Sales', 'mean'),
    Min_Sales=('Total_Sales', 'min'),
    Max_Sales=('Total_Sales', 'max'),
    Avg_Orders=('Order_Count', 'mean'),
    Avg_Order_Value=('Avg_Order_Value', 'mean')
).round(2)

total_customers = len(customer_summary)
total_sales = customer_summary['Total_Sales'].sum()
spending_summary = spending_summary.assign(
    Customer_Pct=(spending_summary['Customer_Count']/total_customers*100).round(1),
    Sales_Pct=(spending_summary['Total_Sales_Sum']/total_sales*100).round(1)
)

# Output Results
print("CUSTOMER SPENDING ANALYSIS SUMMARY".center(50, '='))
print(f"\nTotal Customers: {total_customers:,}")
print(f"Total Sales: ${total_sales:,.2f}")
print(f"Average Sales per Customer: ${customer_summary['Total_Sales'].mean():,.2f}")
print(f"Median Sales per Customer: ${customer_summary['Total_Sales'].median():,.2f}")

print("\nSPENDING CATEGORY BREAKDOWN:".center(40, '='))
for category in spending_summary.index:
    stats = spending_summary.loc[category]
    print(f"\n{category}:")
    print(f"  Customers: {stats['Customer_Count']:,} ({stats['Customer_Pct']}%)")
    print(f"  Total Sales: ${stats['Total_Sales_Sum']:,.2f} ({stats['Sales_Pct']}%)")
    print(f"  Avg per Customer: ${stats['Avg_Sales_Per_Customer']:,.2f}")
    print(f"  Sales Range: ${stats['Min_Sales']:,.2f}-${stats['Max_Sales']:,.2f}")
    print(f"  Avg Orders: {stats['Avg_Orders']:.1f}")
    print(f"  Avg Order Value: ${stats['Avg_Order_Value']:,.2f}")

# Top 20 Customers
top_20 = customer_summary.head(20).assign(
    Total_Sales_Fmt=lambda x: x['Total_Sales'].apply('${:,.2f}'.format),
    Avg_Order_Value_Fmt=lambda x: x['Avg_Order_Value'].apply('${:,.2f}'.format)
)[['Customer Name', 'Total_Sales_Fmt', 'Order_Count', 'Avg_Order_Value_Fmt', 'Segment', 'Region', 'Spending_Category']]

print("\nTOP 20 HIGHEST SPENDING CUSTOMERS:".center(50, '='))
print(top_20.to_string(index=False))

# Return summary
spending_summary.reset_index()

"""### Top 5 Customers Analysis
This barplot shows us the top 5 customers resulting in most sales.
"""

import pandas as pd
import plotly.graph_objects as go

# Data Preparation
car['Order Date'] = pd.to_datetime(car['Order Date'])
car['Sales'] = pd.to_numeric(car['Sales'])
car['Profit'] = pd.to_numeric(car['Profit'])

# Customer Analysis
customer_analysis = car.groupby(['Customer ID', 'Customer Name']).agg(
    Total_Sales=('Sales', 'sum'),
    Order_Count=('Sales', 'count'),
    Avg_Order_Value=('Sales', 'mean'),
    Total_Profit=('Profit', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    First_Purchase=('Order Date', 'min'),
    Last_Purchase=('Order Date', 'max'),
    Segment=('Segment', 'first'),
    Region=('Region', 'first')
).round(2).reset_index()

# Additional Metrics
customer_analysis['Lifespan_Days'] = (customer_analysis['Last_Purchase'] - customer_analysis['First_Purchase']).dt.days
customer_analysis['Profit_Margin_%'] = (customer_analysis['Total_Profit'] / customer_analysis['Total_Sales'] * 100).round(1)

# Top 5 Customers
top_5 = customer_analysis.sort_values('Total_Sales', ascending=False).head(5)

# Print Summary
print("TOP 5 HIGHEST-VALUE CUSTOMERS".center(50, '='))
for _, row in top_5.iterrows():
    print(f"\n{row['Customer Name']}")
    print(f"  Total Sales: ${row['Total_Sales']:,.2f}")
    print(f"  Profit: ${row['Total_Profit']:,.2f} ({row['Profit_Margin_%']}%)")
    print(f"  Orders: {row['Order_Count']} (Avg ${row['Avg_Order_Value']:,.2f})")
    print(f"  {row['Segment']} | {row['Region']}")
    print(f"  Customer Since: {row['First_Purchase'].strftime('%Y-%m-%d')}")

# Visualization
fig = go.Figure(go.Bar(
    x=top_5['Customer Name'],
    y=top_5['Total_Sales'],
    text=[f"${x:,.0f}" for x in top_5['Total_Sales']],
    marker_color=px.colors.qualitative.Plotly[:5],
    hovertemplate="<b>%{x}</b><br>Sales: $%{y:,.2f}<extra></extra>"
))

fig.update_layout(
    title='Top 5 Customers by Total Sales',
    xaxis_title='Customer',
    yaxis_title='Total Sales ($)',
    yaxis_tickformat='$,.0f',
    xaxis_tickangle=45,
    plot_bgcolor='white',
    height=500
)

fig.show()

"""### Top 5 Products Analysis
This barplot shows the top 5 products category contributing to total sales.
"""

import pandas as pd
import plotly.graph_objects as go

# Data Preparation
car['Sales'] = pd.to_numeric(car['Sales'])
car['Profit'] = pd.to_numeric(car['Profit'])
car['Quantity'] = pd.to_numeric(car['Quantity'])

# Sub-Category Analysis
subcat_analysis = car.groupby(['Sub-Category', 'Category']).agg(
    Total_Sales=('Sales', 'sum'),
    Order_Count=('Sales', 'count'),
    Avg_Order_Value=('Sales', 'mean'),
    Total_Profit=('Profit', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    Total_Quantity=('Quantity', 'sum')
).round(2).reset_index()

# Additional Metrics
subcat_analysis['Profit_Margin_%'] = (subcat_analysis['Total_Profit'] / subcat_analysis['Total_Sales'] * 100).round(1)
subcat_analysis['Market_Share_%'] = (subcat_analysis['Total_Sales'] / subcat_analysis['Total_Sales'].sum() * 100).round(1)

# Top 5 Sub-Categories
top_5 = subcat_analysis.sort_values('Total_Sales', ascending=False).head(5)

# Print Summary
print("TOP 5 HIGHEST-VALUE SUB-CATEGORIES".center(55, '='))
for _, row in top_5.iterrows():
    print(f"\n{row['Sub-Category']} ({row['Category']})")
    print(f"  Sales: ${row['Total_Sales']:,.2f} ({row['Market_Share_%']}% share)")
    print(f"  Profit: ${row['Total_Profit']:,.2f} ({row['Profit_Margin_%']}% margin)")
    print(f"  Orders: {row['Order_Count']:,} (Avg ${row['Avg_Order_Value']:,.2f})")
    print(f"  Quantity: {row['Total_Quantity']:,} units")

# Visualization
fig = go.Figure(go.Bar(
    x=top_5['Sub-Category'],
    y=top_5['Total_Sales'],
    text=[f"${x:,.0f}" for x in top_5['Total_Sales']],
    marker_color=px.colors.qualitative.Plotly[:5],
    hovertemplate="<b>%{x}</b><br>Sales: $%{y:,.2f}<extra></extra>"
))

fig.update_layout(
    title='Top 5 Sub-Categories by Sales',
    xaxis_title='Sub-Category',
    yaxis_title='Total Sales ($)',
    yaxis_tickformat='$,.0f',
    xaxis_tickangle=45,
    plot_bgcolor='white',
    height=500
)

fig.show()

"""### Region Wise Performance Analysis
This detailed analysis helps us to understand different sales parameters based on different regions.
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Data Preparation
car['Sales'] = pd.to_numeric(car['Sales'])
car['Profit'] = pd.to_numeric(car['Profit'])
car['Discount'] = pd.to_numeric(car['Discount'])
car['Profit_Margin_%'] = (car['Profit'] / car['Sales'] * 100).round(2)

# Regional Analysis
regional_stats = car.groupby('Region').agg(
    Order_Count=('Sales', 'count'),
    Total_Sales=('Sales', 'sum'),
    Avg_Sales=('Sales', 'mean'),
    Median_Sales=('Sales', 'median'),
    Total_Profit=('Profit', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    Avg_Margin=('Profit_Margin_%', 'mean'),
    Avg_Discount=('Discount', 'mean')
).round(2)

# Print Summary
print("REGIONAL PERFORMANCE SUMMARY".center(50, '='))
for region, stats in regional_stats.iterrows():
    print(f"\n{region} Region:")
    print(f"  Orders: {stats['Order_Count']:,}")
    print(f"  Sales: ${stats['Total_Sales']:,.2f} (Avg ${stats['Avg_Sales']:,.2f})")
    print(f"  Profit: ${stats['Total_Profit']:,.2f} ({stats['Avg_Margin']:.1f}% margin)")
    print(f"  Avg Discount: {stats['Avg_Discount']:.1%}")

# Visualization
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=(
        'Sales Distribution', 'Profit Distribution',
        'Discount Distribution', 'Margin Distribution'
    ),
    vertical_spacing=0.15
)

# Create plots
metrics = ['Sales', 'Profit', 'Discount', 'Profit_Margin_%']
titles = ['Sales ($)', 'Profit ($)', 'Discount Rate', 'Margin (%)']
colors = px.colors.qualitative.Plotly

for i, metric in enumerate(metrics):
    row = (i // 2) + 1
    col = (i % 2) + 1

    for j, region in enumerate(car['Region'].unique()):
        fig.add_trace(
            go.Violin(
                y=car[car['Region'] == region][metric],
                name=region,
                box_visible=True,
                fillcolor=colors[j],
                opacity=0.6,
                showlegend=(i == 0)
            ),
            row=row, col=col
        )
    fig.update_yaxes(title_text=titles[i], row=row, col=col)

# Final Layout
fig.update_layout(
    height=800,
    title='Regional Performance Distributions',
    plot_bgcolor='white',
    margin=dict(t=100)
)

fig.show()

"""### Discount Strategy Analysis
This detailed analysis shows us the discount impact over sales and profit.
"""

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Data Preparation
car['Sales'] = pd.to_numeric(car['Sales'])
car['Profit'] = pd.to_numeric(car['Profit'])
car['Discount'] = pd.to_numeric(car['Discount'])
car['Profit_Margin_%'] = (car['Profit'] / car['Sales'] * 100).round(2)

# Discount Analysis
car['Discount_Range'] = pd.cut(car['Discount'],
                             bins=[0, 0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.35, 0.40, 1.0],
                             labels=['0-5%', '5-10%', '10-15%', '15-20%', '20-25%', '25-30%', '30-35%', '35-40%', '40%+'])

discount_analysis = car.groupby('Discount_Range').agg(
    Order_Count=('Sales', 'count'),
    Total_Sales=('Sales', 'sum'),
    Avg_Sales=('Sales', 'mean'),
    Total_Profit=('Profit', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    Avg_Margin=('Profit_Margin_%', 'mean'),
    Avg_Discount=('Discount', 'mean')
).round(2).reset_index()

discount_analysis['Profit_Per_Order'] = (discount_analysis['Total_Profit'] / discount_analysis['Order_Count']).round(2)

# Detailed Analysis
car['Discount_Rounded'] = (car['Discount'] * 100).round(0) / 100
detailed_analysis = car.groupby('Discount_Rounded').agg(
    Order_Count=('Sales', 'count'),
    Total_Sales=('Sales', 'sum'),
    Total_Profit=('Profit', 'sum'),
    Avg_Margin=('Profit_Margin_%', 'mean')
).round(2).reset_index()

significant_discounts = detailed_analysis[detailed_analysis['Order_Count'] >= 50]

# Visualization
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=(
        'Profit Margin by Discount Range',
        'Total Profit by Discount Range',
        'Profit per Order by Discount Range',
        'Detailed Margin Analysis'
    ),
    specs=[[{}, {}], [{}, {}]]
)

# Add main charts
metrics = ['Avg_Margin', 'Total_Profit', 'Profit_Per_Order']
titles = ['Margin (%)', 'Total Profit ($)', 'Profit per Order ($)']
colors = ['#636EFA', '#00CC96', '#AB63FA']

for i, metric in enumerate(metrics):
    fig.add_trace(
        go.Bar(
            x=discount_analysis['Discount_Range'],
            y=discount_analysis[metric],
            name=titles[i],
            marker_color=colors[i],
            text=[f"{x:,.0f}{'%' if i==0 else '$'}" for x in discount_analysis[metric]],
            textposition='auto'
        ),
        row=(i//2)+1, col=(i%2)+1
    )

# Add detailed scatter plot
fig.add_trace(
    go.Scatter(
        x=significant_discounts['Discount_Rounded']*100,
        y=significant_discounts['Avg_Margin'],
        mode='markers+lines',
        name='Margin by Discount %',
        marker=dict(size=8, color='#EF553B'),
        line=dict(color='#EF553B', width=2)
    ),
    row=2, col=2
)

# Update layout
fig.update_layout(
    height=800,
    title='Discount Strategy Analysis',
    showlegend=False,
    template='plotly_white',
    margin=dict(t=100)
)

# Update axes
fig.update_xaxes(title_text="Discount Range", row=1, col=1)
fig.update_xaxes(title_text="Discount Range", row=1, col=2)
fig.update_xaxes(title_text="Discount Range", row=2, col=1)
fig.update_xaxes(title_text="Discount (%)", row=2, col=2)

fig.update_yaxes(title_text="Margin (%)", row=1, col=1)
fig.update_yaxes(title_text="Total Profit ($)", row=1, col=2)
fig.update_yaxes(title_text="Profit per Order ($)", row=2, col=1)
fig.update_yaxes(title_text="Margin (%)", row=2, col=2)

fig.update_xaxes(tickangle=45)
fig.show()

# Optimal Values Summary
optimal_range = discount_analysis.loc[discount_analysis['Avg_Margin'].idxmax()]
max_profit_range = discount_analysis.loc[discount_analysis['Total_Profit'].idxmax()]
optimal_discount = significant_discounts.loc[significant_discounts['Avg_Margin'].idxmax()] if len(significant_discounts) > 0 else detailed_analysis.loc[detailed_analysis['Avg_Margin'].idxmax()]

print("\n" + " OPTIMAL DISCOUNT FINDINGS ".center(50, '='))
print(f"\n• Best Margin Range: {optimal_range['Discount_Range']}")
print(f"  → Margin: {optimal_range['Avg_Margin']}% | Orders: {optimal_range['Order_Count']:,}")
print(f"\n• Highest Profit Range: {max_profit_range['Discount_Range']}")
print(f"  → Profit: ${max_profit_range['Total_Profit']:,.2f} | Orders: {max_profit_range['Order_Count']:,}")
print(f"\n• Optimal Discount Level: {optimal_discount['Discount_Rounded']:.0%}")
print(f"  → Margin: {optimal_discount['Avg_Margin']}% | Orders: {optimal_discount['Order_Count']:,}")

"""### Ship Mode Analysis
This indepth summary shows us the different parameters against each shipping mode to understand which mode is fastest and most cost-effective.
"""

import pandas as pd

# Data Preparation
car[['Order Date', 'Ship Date']] = car[['Order Date', 'Ship Date']].apply(pd.to_datetime)
car[['Sales', 'Profit', 'Delivery-TAT']] = car[['Sales', 'Profit', 'Delivery-TAT']].apply(pd.to_numeric)
car['Delivery_Days'] = (car['Ship Date'] - car['Order Date']).dt.days
car['Profit_Margin_%'] = (car['Profit'] / car['Sales'] * 100).round(2)

# Ship Mode Analysis
ship_mode = car.groupby('Ship Mode').agg(
    Order_Count=('Sales', 'count'),
    Avg_Delivery=('Delivery_Days', 'mean'),
    Delivery_Std=('Delivery_Days', 'std'),
    Min_Delivery=('Delivery_Days', 'min'),
    Max_Delivery=('Delivery_Days', 'max'),
    Avg_Sales=('Sales', 'mean'),
    Total_Sales=('Sales', 'sum'),
    Avg_Profit=('Profit', 'mean'),
    Total_Profit=('Profit', 'sum'),
    Avg_Margin=('Profit_Margin_%', 'mean'),
    Margin_Std=('Profit_Margin_%', 'std'),
    Avg_TAT=('Delivery-TAT', 'mean'),
    TAT_Std=('Delivery-TAT', 'std')
).round(2)

# Calculate Metrics
ship_mode = ship_mode.assign(
    Market_Share=lambda x: (x['Order_Count']/x['Order_Count'].sum()*100).round(1),
    Profit_Efficiency=lambda x: (x['Total_Profit']/x['Total_Sales']).round(3),
    Delivery_Reliability=lambda x: (1/(x['Delivery_Std']+0.1)).round(2)
).sort_values('Avg_Delivery')

# Format Summary Table
summary = ship_mode[['Order_Count', 'Market_Share', 'Avg_Delivery', 'Delivery_Std',
                    'Avg_Sales', 'Avg_Profit', 'Avg_Margin', 'Profit_Efficiency']]
summary = summary.reset_index()
summary[['Avg_Sales', 'Avg_Profit']] = summary[['Avg_Sales', 'Avg_Profit']].applymap('${:,.2f}'.format)
summary['Avg_Margin'] = summary['Avg_Margin'].map('{:.1f}%'.format)

# Key Findings
findings = {
    'Fastest': ship_mode['Avg_Delivery'].idxmin(),
    'Most Profitable': ship_mode['Avg_Margin'].idxmax(),
    'Most Reliable': ship_mode['Delivery_Std'].idxmin(),
    'Highest Volume': ship_mode['Order_Count'].idxmax()
}

print("SHIP MODE PERFORMANCE ANALYSIS".center(50, '='))
print("\n" + summary.to_string(index=False))
print("\nKEY FINDINGS:")
for k, v in findings.items():
    print(f"- {k}: {v}")

summary

"""### Loss-making Products Analysis
This barplot explains us the top 5 products category contributing to most losses.
"""

import pandas as pd
import plotly.express as px

# Data Preparation
num_cols = ['Sales', 'Profit', 'Quantity', 'Discount']
car[num_cols] = car[num_cols].apply(pd.to_numeric)

# Negative Profit Analysis
neg_profit = car[car['Profit'] < 0].copy()
print(f"NEGATIVE PROFIT ANALYSIS\n{'='*50}")
print(f"Orders: {len(neg_profit):,} ({len(neg_profit)/len(car)*100:.1f}%)")
print(f"Total Loss: ${neg_profit['Profit'].sum():,.2f}")
print(f"Avg Loss: ${neg_profit['Profit'].mean():,.2f}")

# Sub-Category Analysis
subcat_loss = neg_profit.groupby('Sub-Category').agg(
    Total_Loss=('Profit', 'sum'),
    Order_Count=('Sales', 'count'),
    Avg_Loss=('Profit', 'mean'),
    Total_Sales=('Sales', 'sum'),
    Avg_Discount=('Discount', 'mean'),
    Category=('Category', 'first')
).assign(
    Loss_Pct=lambda x: (x['Total_Loss']/x['Total_Sales']*100).round(1)
).sort_values('Total_Loss').reset_index()

# Top 5 Worst Sub-Categories
top5 = subcat_loss.head(5)
print(f"\nTOP 5 LOSS MAKERS\n{'='*50}")
for _, row in top5.iterrows():
    print(f"{row['Sub-Category']} ({row['Category']})")
    print(f"  Loss: ${row['Total_Loss']:,.2f} | Orders: {row['Order_Count']:,}")
    print(f"  Avg Loss: ${row['Avg_Loss']:,.2f} | Discount: {row['Avg_Discount']:.1%}")
    print(f"  Loss%: {row['Loss_Pct']:.1f}% | Sales: ${row['Total_Sales']:,.2f}")
    print("-"*40)

# Visualization
fig = px.bar(top5, x='Sub-Category', y='Total_Loss',
             text=[f"${x:,.0f}" for x in top5['Total_Loss']],
             color='Sub-Category',
             title='Top 5 Loss-Making Sub-Categories')
fig.update_layout(showlegend=False, yaxis_title='Total Loss ($)',
                 plot_bgcolor='white', height=500)
fig.update_yaxes(tickprefix='$', showgrid=True, gridcolor='lightgray')
fig.add_hline(y=0, line_dash="dash", line_color="black")

# Overall Profitability
subcat_profit = car.groupby('Sub-Category').agg(
    Total_Profit=('Profit', 'sum'),
    Order_Count=('Sales', 'count'),
    Category=('Category', 'first')
).reset_index()
unprofitable = subcat_profit[subcat_profit['Total_Profit'] < 0]

print(f"\nOVERALL PROFITABILITY\n{'='*50}")
print(f"Sub-Categories: {len(subcat_profit)}")
print(f"Unprofitable: {len(unprofitable)} ({(len(unprofitable)/len(subcat_profit)*100):.1f}%)")
if not unprofitable.empty:
    print("\nUnprofitable Sub-Categories:")
    for _, row in unprofitable.sort_values('Total_Profit').iterrows():
        print(f"  {row['Sub-Category']}: ${row['Total_Profit']:,.2f}")

fig.show()

"""## 05- Key Findings and Recommendations

📊 Sales & Profit Analysis
- Negative Profit Orders: `18.6%` of orders are unprofitable, with `$-157,038.93` total losses.

- Worst Sub-Categories: Top 5 loss-making sub-categories (e.g., `Tables: $-17,753.21, Bookcases: $-3,632.07,Supplies: $-1,171.39`) contribute `$-157,038.93` in losses.

- Optimal Discount: Highest profit margin at `15%-20%` discount range. Avoid discounts beyond `35%-40%` as they erode margins.

✅ Recommendations:

- Review pricing strategy for loss-making sub-categories.

- Cap discounts at `15%` to maximize profitability.

🚚 Shipping & Delivery Analysis
- Fastest Ship Mode: `Same Day (std 0.2 days)`.

- Most Profitable Ship Mode: `Second Class with 15.1%  margin`.

- Delivery Impact: Longer deliveries(`Standard`) correlate with `11.3% lower profit margins`.

✅ Recommendations:

- Promote `Second Class` to `high-value` customers.

- Improve `logistics` for `slow-delivery` categories.

💰 Customer Segmentation
VIP Customers (Top 20): Drive `11.8%` of total sales `($275,371.13)`.

At-Risk Customers: `10.1%` haven’t purchased in `93+ days`.

High-Value Segments: `VIP Customers` have the `highest average order value ($784.84)`.

✅ Recommendations:

- Launch `loyalty programs` for `VIP customers`.

- Win back `at-risk customers with targeted discounts`.

📦 Product Performance
- Best Sellers: `Chairs (Direct Sale)` generates `$25,449.75 (8.3% margin)` in profit.

- Low-Margin Items: `Binders (Third Party)` has only  `-106.5% margin`.

✅ Recommendations:

- Bundle `low-margin products` with `high-margin` ones.

- `Increase stock` for high-demand, `high-margin` items.

📉 Operational Insights
- Discounts & Profit Trade-off: Orders with `10%-15% discount` have `3% lower margins`.

- Delivery Reliability: `Same Day` has the `lowest variability (0.21 days std)` which eventually `improves customer trust and reduces complaints`.

✅ Recommendations:

- Optimize `discounting` strategy to `balance sales volume & profit`.

- Standardize `shipping methods` for consistency.

🎯 Final Strategic Priorities
- `Fix Loss-Makers:` Adjust pricing/discontinue unprofitable products.

- `Retain VIPs:` Personalized offers for top customers.

- `Optimize Shipping:` Balance speed vs. cost.

- `Smart Discounting:` Limit deep discounts to clearance items only.

---
"""